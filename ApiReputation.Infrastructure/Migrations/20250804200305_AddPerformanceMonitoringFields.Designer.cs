// <auto-generated />
using System;
using ApiReputation.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiReputation.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250804200305_AddPerformanceMonitoringFields")]
    partial class AddPerformanceMonitoringFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiReputation.Domain.Entities.ApiInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Latency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiInfos");
                });

            modelBuilder.Entity("ApiReputation.Domain.Entities.ScanResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiInfoId")
                        .HasColumnType("int");

                    b.Property<bool>("HasHstsHeader")
                        .HasColumnType("bit");

                    b.Property<bool>("HasXContentTypeOptionsHeader")
                        .HasColumnType("bit");

                    b.Property<bool>("HasXFrameOptionsHeader")
                        .HasColumnType("bit");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsSslValid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessStatusCode")
                        .HasColumnType("bit");

                    b.Property<string>("OverallResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseTimeMs")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScanDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServerInfoLeakDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SslExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SslIssuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiInfoId");

                    b.ToTable("ScanResults");
                });

            modelBuilder.Entity("ApiReputation.Domain.Entities.ScanResult", b =>
                {
                    b.HasOne("ApiReputation.Domain.Entities.ApiInfo", "ApiInfo")
                        .WithMany()
                        .HasForeignKey("ApiInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
